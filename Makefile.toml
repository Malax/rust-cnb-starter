[tasks.release-build]
command = "cargo"
args = ["build", "--release", "--target", "x86_64-unknown-linux-musl"]

[tasks.release-build.mac]
dependencies = ["check-crosscompile-mac-deps"]

[tasks.release-build.mac.env]
"CARGO_TARGET_X86_64_UNKNOWN_LINUX_MUSL_LINKER" = "x86_64-linux-musl-ld"
"CC_x86_64_unknown_linux_musl" = "x86_64-linux-musl-gcc"

[tasks.development-build]
command = "cargo"
args = ["build", "--target", "x86_64-unknown-linux-musl"]

[tasks.development-build.mac]
dependencies = ["check-crosscompile-mac-deps"]

[tasks.development-build.mac.env]
"CARGO_TARGET_X86_64_UNKNOWN_LINUX_MUSL_LINKER" = "x86_64-linux-musl-ld"
"CC_x86_64_unknown_linux_musl" = "x86_64-linux-musl-gcc"

[tasks.strip]
command = "strip"
args = ["target/x86_64-unknown-linux-musl/release/bp_detect", "target/x86_64-unknown-linux-musl/release/bp_build"]

[tasks.check-crosscompile-mac-deps]
script_runner = "@rust"
script = '''
//! ```cargo
//! [dependencies]
//! which = "4.0.2"
//! colored = "2.0.0"
//! ```
// Silence warning from rust-script:
#![allow(non_snake_case)]

use which::which;
use colored::*;
use std::path::PathBuf;
use std::process::exit;

fn main() {
    let required_binaries = vec!["x86_64-linux-musl-ld", "x86_64-linux-musl-gcc"];
    let binaries = required_binaries.iter().map(which).collect::<Result<Vec<PathBuf>, _>>();
    if binaries.is_err() {
        println!("{}", "Required binaries for cross-compilation missing".bold().red());
        println!("{}", "===============================================".bold().red());
        println!("{}", "! Please make sure to install homebrew-musl-cross to enable cross compilation to Linux.".bold().red());
        println!("{}", "! https://github.com/FiloSottile/homebrew-musl-cross".bold().red());
        println!("");
        println!("Exiting...");
        exit(1);
    }
}
'''

[tasks.copy-files]
script_runner = "@rust"
script = '''
//! ```cargo
//! [dependencies]
//! colored = "2.0.0"
//! ```
// Silence warning from rust-script:
#![allow(non_snake_case)]

use colored::*;
use std::path::PathBuf;
use std::fs;
use std::collections::HashMap;
use std::path::Path;

fn main() {
    let destination = PathBuf::from("target/buildpack");

    if destination.exists() {
        std::fs::remove_dir_all(&destination).unwrap();
    }

    fs::create_dir_all(&destination.join("bin")).unwrap();

    let bin_name = find_binary(PathBuf::from("./target/x86_64-unknown-linux-musl/debug")).unwrap().unwrap();

    fs::copy(&bin_name, destination.join("bin/build")).unwrap();
    fs::hard_link(destination.join("bin/build"), destination.join("bin/detect")).unwrap();
    fs::copy(PathBuf::from("./buildpack.toml"), destination.join("buildpack.toml")).unwrap();

    println!("{}", "Successfully created buildpack directory".bold().green());
    println!("{}", "========================================".bold().green());
    println!("To try out your buildpack run:");
    println!("$ pack build rust-cnb-starter -b {} --path {}", destination.to_str().unwrap().bold(), "$APP_DIR".bold());
    println!("");
}


fn find_binary(path: impl AsRef<Path>) -> Result<Option<PathBuf>, std::io::Error> {
    use std::os::unix::fs::MetadataExt;

    for dir_entry in std::fs::read_dir(path.as_ref())?.into_iter() {
        let dir_entry = dir_entry?;
        let meta = dir_entry.metadata()?;
        if meta.is_file() && meta.mode() & 0o100 == 0o100 {
            return Ok(Some(dir_entry.path()));
        }
    }

    Ok(None)
}
'''

[tasks.release]
dependencies = [
    "release-build",
    "strip"
]

[tasks.development]
dependencies = [
    "development-build",
    "copy-files"
]
